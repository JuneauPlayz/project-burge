[gd_scene load_steps=13 format=3 uid="uid://bi555vcqhi0p5"]

[ext_resource type="Texture2D" uid="uid://djyorqs13oxgy" path="res://assets/burger.jpg" id="1_qva00"]
[ext_resource type="PackedScene" uid="uid://5spa5amgsxfm" path="res://scenes/reusables/hp_bar.tscn" id="2_8kbd0"]
[ext_resource type="Resource" uid="uid://d0sxdut8uscys" path="res://resources/EnemySkills/EnemyAOEEarth.tres" id="2_djpfd"]
[ext_resource type="Resource" uid="uid://cr3bbtfskjida" path="res://resources/EnemySkills/EnemyAOEFire.tres" id="3_begk6"]
[ext_resource type="PackedScene" uid="uid://sdwnoh61gawa" path="res://scenes/reusables/skill_info.tscn" id="3_vj4v8"]

[sub_resource type="GDScript" id="GDScript_uiygj"]
script/source = "extends Unit
class_name Enemy

@export var skill1 : Skill
@export var skill2 : Skill
var current_skill : Skill
@export var current_element : String = \"none\"
@export var reaction_primed = 0
@export var status : Array = []
@onready var damage_number_origin: Node2D = $DamageNumberOrigin
var hp_bar
@onready var skill_info: Control = $ShowNextSkill/SkillInfo
var connected = false
@onready var targeting_area: Button = $TargetingArea
var combat_manager: Node

var BLEED = preload(\"res://resources/Status Effects/Bleed.tres\")

signal skill_end
signal reaction_ended
signal target_chosen

# Called when the node enters the scene tree for the first time.
func _ready() -> void:
	#always mak	e hp bar second child
	await get_tree().create_timer(0.1).timeout
	combat_manager = get_parent().get_parent().get_combat_manager()
	current_skill = skill1
	skill_info.skill = current_skill
	skill_info.update_skill_info()
	print(health)
	hp_bar = get_child(1)
	hp_bar.set_hp(health)
	hp_bar.set_maxhp(health)
	self.target_chosen.connect(combat_manager.target_signal)



# Called every frame. 'delta' is the elapsed time since the previous frame.
func _process(delta: float) -> void:
	pass
	

func receive_skill(skill):
	var rounded : int
	var reaction = \"\"
	if (!connected):
		ReactionManager.reaction_finished.connect(self.reaction_signal)
		connected = true
	var r = await ReactionManager.reaction(current_element, skill.element, self, skill.damage, 1)
	if (r): 
		await reaction_ended 
		if skill.double_hit == true:
			await get_tree().create_timer(0.3).timeout
			var r2 = await ReactionManager.reaction(current_element, skill.element2, self, skill.damage2, 1)
			if (r2):
				await reaction_ended 
			if (!r2):
				self.take_damage(skill.damage)
			DamageNumbers.display_number(skill.damage, damage_number_origin.global_position, skill.element, reaction)
			check_if_dead()
			if (skill.element != \"none\"):
				current_element = skill.element
	# no reaction
	if (!r):
		self.take_damage(skill.damage)
		DamageNumbers.display_number(skill.damage, damage_number_origin.global_position, skill.element, reaction)
		check_if_dead()
		# don't change current element if skill has no element
		if (skill.element != \"none\"):
			current_element = skill.element
		if skill.double_hit == true:
			await get_tree().create_timer(0.3).timeout
			var r2 = await ReactionManager.reaction(current_element, skill.element2, self, skill.damage2, 1)
			if (r2):
				await reaction_ended 
			if (!r2):
				self.take_damage(skill.damage)
			DamageNumbers.display_number(skill.damage, damage_number_origin.global_position, skill.element, reaction)
			check_if_dead()
			if (skill.element != \"none\"):
				current_element = skill.element
	#handle status effects
	if skill.status_effects != []:
		for x in skill.status_effects:
			if x.name == \"Bleed\":
				var new_bleed = BLEED.duplicate()
				status.append(new_bleed)
	hp_bar.update_element(current_element)


func reaction_signal():
	reaction_ended.emit()
	
	

func take_damage(damage : int):
	health -= damage
	hp_bar.set_hp(health)
	return damage

func check_if_dead():
	if health <= 0:
		die()

func die():
	print(\"ded\")
	combat_manager.enemies.erase(self)
	combat_manager.set_enemy_pos()
	
func change_skills():
	if current_skill == skill1:
		current_skill = skill2
	elif current_skill == skill2:
		current_skill = skill1
	skill_info.skill = current_skill
	skill_info.update_skill_info()
	
func enable_targeting_area():
	targeting_area.visible = true

func disable_targeting_area():
	targeting_area.visible = false

func _on_targeting_area_pressed() -> void:
	target_chosen.emit(self)
	
func execute_status(status_effect):
	print(status_effect)
	take_damage(status_effect.damage)
	DamageNumbers.display_number(status_effect.damage, damage_number_origin.global_position, status_effect.element, \"\")
	status_effect.turns_remaining -= 1
"

[sub_resource type="StyleBoxFlat" id="StyleBoxFlat_ebmkq"]

[sub_resource type="StyleBoxFlat" id="StyleBoxFlat_6w0c8"]
bg_color = Color(0.6, 0.6, 0.6, 0)

[sub_resource type="StyleBoxFlat" id="StyleBoxFlat_76n2e"]
bg_color = Color(0.6, 0.6, 0.6, 0)

[sub_resource type="StyleBoxFlat" id="StyleBoxFlat_xp1kw"]
bg_color = Color(0.6, 0.6, 0.6, 0)

[sub_resource type="StyleBoxFlat" id="StyleBoxFlat_6pkpw"]
bg_color = Color(0.6, 0.6, 0.6, 0)

[sub_resource type="StyleBoxFlat" id="StyleBoxFlat_ysnwy"]
bg_color = Color(0.6, 0.6, 0.6, 0)

[node name="BurgerEnemy" type="Node2D"]
scale = Vector2(0.75, 0.75)
script = SubResource("GDScript_uiygj")
skill1 = ExtResource("2_djpfd")
skill2 = ExtResource("3_begk6")
health = 200

[node name="Burger" type="Sprite2D" parent="."]
position = Vector2(171, 326)
scale = Vector2(0.202917, 0.175208)
texture = ExtResource("1_qva00")

[node name="HP Bar" parent="." instance=ExtResource("2_8kbd0")]
offset_left = 67.9999
offset_top = 471.0
offset_right = 67.9999
offset_bottom = 471.0
metadata/_edit_use_anchors_ = true

[node name="DamageNumberOrigin" type="Node2D" parent="."]
position = Vector2(115, 596)

[node name="ShowNextSkill" type="Control" parent="."]
layout_mode = 3
anchors_preset = 0
offset_left = -325.0
offset_right = -285.0
offset_bottom = 40.0
metadata/_edit_use_anchors_ = true

[node name="Label" type="Label" parent="ShowNextSkill"]
layout_mode = 1
anchors_preset = -1
anchor_left = -28.5
anchor_top = -1.15
anchor_right = -28.5
anchor_bottom = -1.15
offset_left = 1393.0
offset_top = 46.0
offset_right = 1470.0
offset_bottom = 69.0
text = "Next Skill:"
metadata/_edit_use_anchors_ = true

[node name="SkillInfo" parent="ShowNextSkill" instance=ExtResource("3_vj4v8")]
layout_mode = 1
anchors_preset = -1
anchor_left = -28.5
anchor_top = -1.15
anchor_right = -27.5
anchor_bottom = -0.15
offset_left = 1496.0
offset_top = 41.0
offset_right = 1496.0
offset_bottom = 41.0
metadata/_edit_use_anchors_ = true

[node name="TargetingArea" type="Button" parent="."]
visible = false
offset_left = 45.0
offset_top = 217.0
offset_right = 288.0
offset_bottom = 576.0
theme_override_styles/focus = SubResource("StyleBoxFlat_ebmkq")
theme_override_styles/disabled = SubResource("StyleBoxFlat_6w0c8")
theme_override_styles/hover_pressed = SubResource("StyleBoxFlat_76n2e")
theme_override_styles/hover = SubResource("StyleBoxFlat_xp1kw")
theme_override_styles/pressed = SubResource("StyleBoxFlat_6pkpw")
theme_override_styles/normal = SubResource("StyleBoxFlat_ysnwy")

[connection signal="pressed" from="TargetingArea" to="." method="_on_targeting_area_pressed"]
